dejan@test:~/rldatix/lambda$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_api_gateway_deployment.api_deployment will be created
  + resource "aws_api_gateway_deployment" "api_deployment" {
      + created_date  = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + rest_api_id   = (known after apply)
      + stage_name    = "prod"
    }

  # aws_api_gateway_integration.lambda_integration will be created
  + resource "aws_api_gateway_integration" "lambda_integration" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "GET"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_method.api_method will be created
  + resource "aws_api_gateway_method" "api_method" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "GET"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_resource.api_resource will be created
  + resource "aws_api_gateway_resource" "api_resource" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "mydotnetapp"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_rest_api.api will be created
  + resource "aws_api_gateway_rest_api" "api" {
      + api_key_source               = (known after apply)
      + arn                          = (known after apply)
      + binary_media_types           = (known after apply)
      + created_date                 = (known after apply)
      + description                  = "API Gateway for Lambda Function"
      + disable_execute_api_endpoint = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + minimum_compression_size     = -1
      + name                         = "LambdaAPIGateway"
      + policy                       = (known after apply)
      + root_resource_id             = (known after apply)
      + tags_all                     = (known after apply)
    }

  # aws_api_gateway_stage.api_stage will be created
  + resource "aws_api_gateway_stage" "api_stage" {
      + arn           = (known after apply)
      + deployment_id = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + rest_api_id   = (known after apply)
      + stage_name    = "prod-v2"
      + tags_all      = (known after apply)
      + web_acl_arn   = (known after apply)
    }

  # aws_iam_role.lambda_execution_role will be created
  + resource "aws_iam_role" "lambda_execution_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "lambda_execution_role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.lambda_basic_execution will be created
  + resource "aws_iam_role_policy_attachment" "lambda_basic_execution" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "lambda_execution_role"
    }

  # aws_lambda_function.my_lambda will be created
  + resource "aws_lambda_function" "my_lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "MyDotNetAppFunction"
      + id                             = (known after apply)
      + image_uri                      = "230005740435.dkr.ecr.us-east-1.amazonaws.com/mydotnetapp:latest"
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Image"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 60
      + version                        = (known after apply)
    }

  # aws_lambda_permission.api_lambda_permission will be created
  + resource "aws_lambda_permission" "api_lambda_permission" {
      + action        = "lambda:InvokeFunction"
      + function_name = "MyDotNetAppFunction"
      + id            = (known after apply)
      + principal     = "apigateway.amazonaws.com"
      + source_arn    = (known after apply)
      + statement_id  = "AllowAPIGatewayInvoke"
    }

Plan: 10 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + api_url              = (known after apply)
  + lambda_function_arn  = (known after apply)
  + lambda_function_name = "MyDotNetAppFunction"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_role.lambda_execution_role: Creating...
aws_api_gateway_rest_api.api: Creating...
aws_api_gateway_rest_api.api: Creation complete after 2s [id=8f2o0qasg4]
aws_api_gateway_resource.api_resource: Creating...
aws_api_gateway_resource.api_resource: Creation complete after 1s [id=7b1ysi]
aws_api_gateway_method.api_method: Creating...
aws_iam_role.lambda_execution_role: Creation complete after 3s [id=lambda_execution_role]
aws_lambda_function.my_lambda: Creating...
aws_iam_role_policy_attachment.lambda_basic_execution: Creating...
aws_api_gateway_method.api_method: Creation complete after 0s [id=agm-8f2o0qasg4-7b1ysi-GET]
aws_iam_role_policy_attachment.lambda_basic_execution: Creation complete after 1s [id=lambda_execution_role-20240427124414718600000001]
aws_lambda_function.my_lambda: Still creating... [10s elapsed]
aws_lambda_function.my_lambda: Creation complete after 17s [id=MyDotNetAppFunction]
aws_lambda_permission.api_lambda_permission: Creating...
aws_api_gateway_integration.lambda_integration: Creating...
aws_lambda_permission.api_lambda_permission: Creation complete after 1s [id=AllowAPIGatewayInvoke]
aws_api_gateway_integration.lambda_integration: Creation complete after 1s [id=agi-8f2o0qasg4-7b1ysi-GET]
aws_api_gateway_deployment.api_deployment: Creating...
aws_api_gateway_deployment.api_deployment: Creation complete after 1s [id=2nop5z]
aws_api_gateway_stage.api_stage: Creating...
aws_api_gateway_stage.api_stage: Creation complete after 1s [id=ags-8f2o0qasg4-prod-v2]

Apply complete! Resources: 10 added, 0 changed, 0 destroyed.

Outputs:

api_url = "https://8f2o0qasg4.execute-api.us-east-1.amazonaws.com/prod/prod-v2/mydotnetapp"
lambda_function_arn = "arn:aws:lambda:us-east-1:230005740435:function:MyDotNetAppFunction"
lambda_function_name = "MyDotNetAppFunction"